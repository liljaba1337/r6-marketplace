using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace r6_marketplace.Utils
{
    internal class RequestBodies
    {
        internal const string GetItemData =
            "[{\"operationName\":\"GetItemDetails\",\"variables\":{\"spaceId\":\"0d2ae42d-4c27-4cb7-af6c-2099062302bb\",\"itemId\":\"{ITEMID}\",\"tradeId\":\"\",\"fetchTrade\":false},\"query\":\"query GetItemDetails($spaceId: String!, $itemId: String!, $tradeId: String!, $fetchTrade: Boolean!) {  game(spaceId: $spaceId) {    id    marketableItem(itemId: $itemId) { id item {   ...SecondaryStoreItemFragment   ...SecondaryStoreItemOwnershipFragment   __typename } marketData {   ...MarketDataFragment   __typename } paymentLimitations {   id   paymentItemId   minPrice   maxPrice   __typename } __typename    }    viewer { meta {   id   trades(filterBy: {states: [Created], itemIds: [$itemId]}) {     nodes {  ...TradeFragment  __typename     }     __typename   }   trade(tradeId: $tradeId) @include(if: $fetchTrade) {     ...TradeFragment     __typename   }   __typename } __typename    }    __typename  }}fragment SecondaryStoreItemFragment on SecondaryStoreItem {  id  assetUrl  itemId  name  tags  type  __typename}fragment SecondaryStoreItemOwnershipFragment on SecondaryStoreItem {  id  viewer {    meta { id isOwned quantity __typename    }    __typename  }  __typename}fragment MarketDataFragment on MarketableItemMarketData {  id  sellStats {    id    paymentItemId    lowestPrice    highestPrice    activeCount    __typename  }  buyStats {    id    paymentItemId    lowestPrice    highestPrice    activeCount    __typename  }  lastSoldAt {    id    paymentItemId    price    performedAt    __typename  }  __typename}fragment TradeFragment on Trade {  id  tradeId  state  category  createdAt  expiresAt  lastModifiedAt  failures  tradeItems {    id    item { ...SecondaryStoreItemFragment ...SecondaryStoreItemOwnershipFragment __typename    }    __typename  }  payment {    id    item { ...SecondaryStoreItemQuantityFragment __typename    }    price    transactionFee    __typename  }  paymentOptions {    id    item { ...SecondaryStoreItemQuantityFragment __typename    }    price    transactionFee    __typename  }  paymentProposal {    id    item { ...SecondaryStoreItemQuantityFragment __typename    }    price    __typename  }  viewer {    meta { id tradesLimitations {   ...TradesLimitationsFragment   __typename } __typename    }    __typename  }  __typename}fragment SecondaryStoreItemQuantityFragment on SecondaryStoreItem {  id  viewer {    meta { id quantity __typename    }    __typename  }  __typename}fragment TradesLimitationsFragment on UserGameTradesLimitations {  id  buy {    id    resolvedTransactionCount    resolvedTransactionPeriodInMinutes    activeTransactionCount    __typename  }  sell {    id    resolvedTransactionCount    resolvedTransactionPeriodInMinutes    activeTransactionCount    resaleLocks { id itemId expiresAt __typename    }    __typename  }  __typename}\"}]";
        internal const string GetItemPriceHistoryData =
            "[{\"operationName\":\"GetItemPriceHistory\",\"variables\":{\"spaceId\":\"0d2ae42d-4c27-4cb7-af6c-2099062302bb\",\"itemId\":\"{ITEMID}\",\"paymentItemId\":\"9ef71262-515b-46e8-b9a8-b6b6ad456c67\"},\"query\":\"query GetItemPriceHistory($spaceId: String!, $itemId: String!, $paymentItemId: String!) {\\n  game(spaceId: $spaceId) {\\n    id\\n    marketableItem(itemId: $itemId) {\\n      id\\n      priceHistory(paymentItemId: $paymentItemId) {\\n        id\\n        date\\n        lowestPrice\\n        averagePrice\\n        highestPrice\\n        itemsCount\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"}]";
    }
}
